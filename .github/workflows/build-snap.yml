name: Build and test MicroK8s snap

on:
  pull_request:
    branches:
      - master
  push: 
    branches:
      - master
jobs:
  # build:
  #   name: Create snap package
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: Checking out repo
  #       uses: actions/checkout@v4
  #     - name: Install lxd
  #       run: |
  #         sudo lxd init --auto
  #         sudo usermod --append --groups lxd $USER
  #         sg lxd -c 'lxc version'
  #     - name: Install snapcraft
  #       run: |
  #         sudo snap install snapcraft --classic
  #     - name: Install snapd from candidate
  #       run: |
  #         # TODO(neoaggelos): revert this after latest/beta is working again
  #         sudo snap refresh snapd --channel=latest/stable
  #     - name: Build snap
  #       run: |
  #         sudo chmod 777 -R .
  #         sg lxd -c 'snapcraft --use-lxd'
  #         sudo mv microk8s*.snap microk8sforchina.snap
  #     - name: Uploading snap
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: microk8sforchina.snap
  #         path: microk8sforchina.snap

  build-and-deploy:
      runs-on: ubuntu-20.04
      name: ls-test
      # needs: build

      steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
  
      # 这里可以添加构建snap文件的步骤，如果snap文件已经存在，则此步骤可以省略
      # - name: Build snap file
      #   run: |
      #     # 假设你有一个构建snap的脚本叫做build-snap.sh
      #     chmod +x build-snap.sh
      #     ./build-snap.sh
  
      - name: Set up SSH keys
        # 使用ssh-agent来存储私钥，以便后续步骤可以使用它来连接到服务器
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          # 可选：避免首次连接时的HostKeyChecking
          echo -e "Host 120.27.202.116\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} # 在GitHub仓库的Settings/Secrets中配置的私钥
  

      # - name: Upload snap file to server
      #   uses: actions/download-artifact@v3.0.2
      #   # with:
      #   #   name: microk8sforchina.snap
      #   #   path: build
      #   # 使用scp命令将snap文件上传到服务器
      #   # run: |
      #   #   scp -o StrictHostKeyChecking=no $PWD/build/microk8sforchina.snap root@120.27.202.116:/tmp/
      #   env:
      #     # 这里不需要再次设置SSH_PRIVATE_KEY，因为已经在上一步中设置了ssh-agent
      #     # 但你可以设置其他需要的环境变量
      #     YOUR_SERVER_IP: ${{ secrets.YOUR_SERVER_IP }} # 如果你不想在YAML文件中硬编码IP地址
      #     YOUR_USERNAME: ${{ secrets.YOUR_USERNAME }} # 服务器用户名
      - name: upload 
      
        # # 使用scp命令将snap文件上传到服务器
        run: | 
          ssh -o StrictHostKeyChecking=no  root@120.27.202.116 'ls /tmp'
        # run: |
        #   scp -o StrictHostKeyChecking=no $PWD/build/microk8sforchina.snap root@120.27.202.116:/tmp/        


  # test-upgrade:
  #   name: Upgrade path test
  #   runs-on: ubuntu-20.04
  #   needs: build

  #   steps:
  #     - name: Checking out repo
  #       uses: actions/checkout@v4
  #     - name: Install test dependencies
  #       run: |
  #         set -x
  #         sudo apt-get install python3-setuptools
  #         sudo pip3 install --upgrade pip
  #         sudo pip3 install -U pytest sh psutil
  #         sudo apt-get -y install open-iscsi
  #         sudo systemctl enable iscsid
  #     - name: Fetch snap
  #       uses: actions/download-artifact@v3.0.2
  #       with:
  #         name: microk8sforchina.snap
  #         path: build
  #     - name: Running upgrade path test
  #       run: |
  #         sudo -E UPGRADE_MICROK8S_FROM=latest/edge UPGRADE_MICROK8S_TO=$PWD/build/microk8sforchina.snap pytest -s ./tests/test-upgrade-path.py

  # test-addons-core:
  #   name: Test core addons
  #   runs-on: ubuntu-20.04
  #   needs: build

  #   steps:
  #     - name: Checking out repo
  #       uses: actions/checkout@v4
  #     - name: Install test dependencies
  #       run: |
  #         set -x
  #         sudo apt-get install python3-setuptools
  #         sudo pip3 install --upgrade pip
  #         sudo pip3 install -U pytest sh psutil
  #         sudo apt-get -y install open-iscsi
  #         sudo systemctl enable iscsid
  #     - name: Fetch snap
  #       uses: actions/download-artifact@v3.0.2
  #       with:
  #         name: microk8s.snap
  #         path: build
  #     - name: Running addons tests
  #       run: |
  #         set -x
  #         sudo snap install build/microk8s.snap --classic --dangerous
  #         ./tests/smoke-test.sh
  #         export UNDER_TIME_PRESSURE="True"
  #         export SKIP_PROMETHEUS="False"
  #         sudo -E bash -c "cd /var/snap/microk8s/common/addons/core/tests; pytest -s -ra test-addons.py"

  # test-addons-community:
  #   name: Test community addons
  #   runs-on: ubuntu-20.04
  #   needs: build

  #   steps:
  #     - name: Checking out repo
  #       uses: actions/checkout@v4
  #     - name: Install test dependencies
  #       run: |
  #         set -x
  #         sudo apt-get install python3-setuptools
  #         sudo pip3 install --upgrade pip
  #         sudo pip3 install -U pytest sh
  #         sudo apt-get -y install open-iscsi
  #         sudo systemctl enable iscsid
  #     - name: Fetch snap
  #       uses: actions/download-artifact@v3.0.2
  #       with:
  #         name: microk8s.snap
  #         path: build
  #     # - name: Setup tmate session
  #     #   uses: mxschmitt/action-tmate@v3
  #     - name: Running addons tests
  #       run: |
  #         set -x
  #         sudo snap install build/microk8s.snap --classic --dangerous
  #         sudo microk8s enable community
  #         export UNDER_TIME_PRESSURE="True"
  #         sudo -E bash -c "cd /var/snap/microk8s/common/addons/community/; pytest -s -ra ./tests/"

  # test-addons-core-upgrade:
  #   name: Test core addons upgrade
  #   runs-on: ubuntu-20.04
  #   needs: build

  #   steps:
  #     - name: Checking out repo
  #       uses: actions/checkout@v4
  #     # - name: Setup tmate session
  #     #   uses: mxschmitt/action-tmate@v3
  #     - name: Install test dependencies
  #       run: |
  #         set -x
  #         sudo apt-get install python3-setuptools
  #         sudo pip3 install --upgrade pip
  #         sudo pip3 install -U pytest sh psutil
  #         sudo apt-get -y install open-iscsi
  #         sudo systemctl enable iscsid
  #     - name: Fetch snap
  #       uses: actions/download-artifact@v3.0.2
  #       with:
  #         name: microk8s.snap
  #         path: build
  #     - name: Running upgrade tests
  #       run: |
  #         set -x
  #         export UNDER_TIME_PRESSURE="True"
  #         sudo -E bash -c "UPGRADE_MICROK8S_FROM=latest/edge UPGRADE_MICROK8S_TO=$PWD/build/microk8s.snap pytest -s ./tests/test-upgrade.py"

  # test-cluster-agent:
  #   name: Cluster agent health check
  #   runs-on: ubuntu-20.04
  #   needs: build

  #   steps:
  #     - name: Checking out repo
  #       uses: actions/checkout@v4
  #     - name: Install test dependencies
  #       run: |
  #         set -x
  #         sudo apt-get install python3-setuptools
  #         sudo pip3 install --upgrade pip
  #         sudo pip3 install -U pytest sh requests
  #     - name: Fetch snap
  #       uses: actions/download-artifact@v3.0.2
  #       with:
  #         name: microk8s.snap
  #         path: build
  #     - name: Running cluster agent health check
  #       run: |
  #         set -x
  #         sudo snap install build/microk8s.snap --classic --dangerous
  #         sudo -E bash -c "pytest -s ./tests/test-cluster-agent.py"

  # test-airgap:
  #   name: Test airgap installation
  #   runs-on: ubuntu-20.04
  #   needs: build

  #   steps:
  #     - name: Checking out repo
  #       uses: actions/checkout@v4
  #     - name: Fetch snap
  #       uses: actions/download-artifact@v3.0.2
  #       with:
  #         name: microk8s.snap
  #         path: build
  #     - name: Initialize LXD
  #       run: |
  #         sudo lxd init --auto
  #         sudo lxc network set lxdbr0 ipv6.address=none
  #         sudo usermod --append --groups lxd $USER
  #         sg lxd -c 'lxc version'
  #     - name: Run airgap tests
  #       run: |
  #         sudo -E bash -x -c "./tests/libs/airgap.sh --distro ubuntu:20.04 --channel $PWD/build/microk8s.snap"

  # security-scan:
  #   name: Security scan
  #   runs-on: ubuntu-20.04
  #   needs: build
  #   steps:
  #     - name: Checking out repo
  #       uses: actions/checkout@v4
  #     - name: Fetch snap
  #       uses: actions/download-artifact@v3.0.2
  #       with:
  #         name: microk8s.snap
  #         path: build
  #     - name: Create sarifs directory
  #       run: |
  #         mkdir -p sarifs
  #     - name: Install Trivy vulnerability scanner
  #       uses: aquasecurity/setup-trivy@v0.2.2
  #     - name: Run Trivy vulnerability scanner on codebase
  #       run: |
  #         trivy fs . --format sarif --severity CRITICAL > sarifs/trivy-microk8s-repo-scan--results.sarif
  #     - name: Run Trivy vulnerability scanner on images
  #       run: |
  #         for i in $(cat ./build-scripts/images.txt) ; do
  #           name=$(echo  $i | awk -F ':|/' '{print $(NF-1)}')
  #           trivy image $i --format sarif > sarifs/$name.sarif
  #         done
  #     - name: Run Trivy vulnerability scanner on the snap
  #       run: |
  #         cp build/microk8s.snap .
  #         unsquashfs microk8s.snap
  #         trivy rootfs ./squashfs-root/ --format sarif > sarifs/snap.sarif
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: "sarifs"
